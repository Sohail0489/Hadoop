package org.sears.analytics;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.util.GenericOptionsParser;

public class CleanData {
	
	public static class Map extends Mapper<LongWritable, Text, NullWritable, Text> {
		public void map(LongWritable key, Text values, Context context)	throws IOException, InterruptedException {
	
	
		try
		{
			String line = values.toString();
		    String newline = line.replaceAll("\t", "").replaceAll("\n", "").replaceAll("\\\\", "");
	  
			Date dt = new Date();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			String formatteddate = sdf.format(dt);
			
							
		String [] inline = (newline).split("\u0001");
		
		List<String> lst = new ArrayList<String>();
		
			
		for (String s : inline)
		{
			lst.add(s.trim().concat("\u0001"));
			
		}
		
		StringBuilder str = new StringBuilder();
		str.append(formatteddate);
		str.append("\u0001");
		
		for ( int i=0;i<lst.size();i++)
		{
			
				str.append(lst.get(i));
		
		}
				
		context.write(NullWritable, new Text(str.toString()));
		
			
		}
		catch (Exception e)
		{
			System.out.print(e);
		}
		
		
	}
		}
	
	public static void main(String []args) throws Exception
	{
	
	Configuration conf = new Configuration();
	String[] otherArgs = new GenericOptionsParser(conf, args).getRemainingArgs();
	if (otherArgs.length != 2) {
		System.err.println("Usage: transpose <in> <out>");
		System.exit(2);
	}
	Job job = new Job(conf, "Data Cleansing");
	job.setJarByClass(CleanData.class);
	job.setMapperClass(Map.class);

	job.setMapOutputKeyClass(NullWritable.class);
	job.setMapOutputValueClass(Text.class);

	job.setNumReduceTasks(0);

	FileInputFormat.addInputPath(job, new Path(otherArgs[0]));
	FileOutputFormat.setOutputPath(job, new Path(otherArgs[1]));
	System.exit(job.waitForCompletion(true) ? 0 : 1);

	}


}
